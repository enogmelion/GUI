// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sink0MQprocotol

#ifndef PROTOBUF_Sink0MQprocotol__INCLUDED
#define PROTOBUF_Sink0MQprocotol__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace OpenEphys {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Sink0MQprocotol();
void protobuf_AssignDesc_Sink0MQprocotol();
void protobuf_ShutdownFile_Sink0MQprocotol();

class DoubleMatrix;
class Spike;
class ChannelData;
class ChannelsData;

// ===================================================================

class DoubleMatrix : public ::google::protobuf::Message {
 public:
  DoubleMatrix();
  virtual ~DoubleMatrix();

  DoubleMatrix(const DoubleMatrix& from);

  inline DoubleMatrix& operator=(const DoubleMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleMatrix& default_instance();

  void Swap(DoubleMatrix* other);

  // implements Message ----------------------------------------------

  DoubleMatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleMatrix& from);
  void MergeFrom(const DoubleMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rows = 1;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 1;
  inline ::google::protobuf::uint32 rows() const;
  inline void set_rows(::google::protobuf::uint32 value);

  // required uint32 cols = 2;
  inline bool has_cols() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 2;
  inline ::google::protobuf::uint32 cols() const;
  inline void set_cols(::google::protobuf::uint32 value);

  // repeated double data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:OpenEphys.DoubleMatrix)
 private:
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_cols();
  inline void clear_has_cols();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Sink0MQprocotol();
  friend void protobuf_AssignDesc_Sink0MQprocotol();
  friend void protobuf_ShutdownFile_Sink0MQprocotol();

  void InitAsDefaultInstance();
  static DoubleMatrix* default_instance_;
};
// -------------------------------------------------------------------

class Spike : public ::google::protobuf::Message {
 public:
  Spike();
  virtual ~Spike();

  Spike(const Spike& from);

  inline Spike& operator=(const Spike& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Spike& default_instance();

  void Swap(Spike* other);

  // implements Message ----------------------------------------------

  Spike* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Spike& from);
  void MergeFrom(const Spike& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required sfixed64 timestamp_software = 2;
  inline bool has_timestamp_software() const;
  inline void clear_timestamp_software();
  static const int kTimestampSoftwareFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp_software() const;
  inline void set_timestamp_software(::google::protobuf::int64 value);

  // required int32 source = 3;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 3;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // required int32 nChannels = 4;
  inline bool has_nchannels() const;
  inline void clear_nchannels();
  static const int kNChannelsFieldNumber = 4;
  inline ::google::protobuf::int32 nchannels() const;
  inline void set_nchannels(::google::protobuf::int32 value);

  // required int32 nSamples = 5;
  inline bool has_nsamples() const;
  inline void clear_nsamples();
  static const int kNSamplesFieldNumber = 5;
  inline ::google::protobuf::int32 nsamples() const;
  inline void set_nsamples(::google::protobuf::int32 value);

  // required int32 sortedId = 6;
  inline bool has_sortedid() const;
  inline void clear_sortedid();
  static const int kSortedIdFieldNumber = 6;
  inline ::google::protobuf::int32 sortedid() const;
  inline void set_sortedid(::google::protobuf::int32 value);

  // required int32 electrodeID = 7;
  inline bool has_electrodeid() const;
  inline void clear_electrodeid();
  static const int kElectrodeIDFieldNumber = 7;
  inline ::google::protobuf::int32 electrodeid() const;
  inline void set_electrodeid(::google::protobuf::int32 value);

  // repeated int32 color = 8 [packed = true];
  inline int color_size() const;
  inline void clear_color();
  static const int kColorFieldNumber = 8;
  inline ::google::protobuf::int32 color(int index) const;
  inline void set_color(int index, ::google::protobuf::int32 value);
  inline void add_color(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      color() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_color();

  // repeated float pcProj = 9;
  inline int pcproj_size() const;
  inline void clear_pcproj();
  static const int kPcProjFieldNumber = 9;
  inline float pcproj(int index) const;
  inline void set_pcproj(int index, float value);
  inline void add_pcproj(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pcproj() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pcproj();

  // required int32 samplingFrequencyHz = 10;
  inline bool has_samplingfrequencyhz() const;
  inline void clear_samplingfrequencyhz();
  static const int kSamplingFrequencyHzFieldNumber = 10;
  inline ::google::protobuf::int32 samplingfrequencyhz() const;
  inline void set_samplingfrequencyhz(::google::protobuf::int32 value);

  // repeated int32 data = 11 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 11;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // repeated int32 gain = 12 [packed = true];
  inline int gain_size() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 12;
  inline ::google::protobuf::int32 gain(int index) const;
  inline void set_gain(int index, ::google::protobuf::int32 value);
  inline void add_gain(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gain() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gain();

  // repeated int32 threshold = 13 [packed = true];
  inline int threshold_size() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 13;
  inline ::google::protobuf::int32 threshold(int index) const;
  inline void set_threshold(int index, ::google::protobuf::int32 value);
  inline void add_threshold(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threshold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threshold();

  // @@protoc_insertion_point(class_scope:OpenEphys.Spike)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_timestamp_software();
  inline void clear_has_timestamp_software();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_nchannels();
  inline void clear_has_nchannels();
  inline void set_has_nsamples();
  inline void clear_has_nsamples();
  inline void set_has_sortedid();
  inline void clear_has_sortedid();
  inline void set_has_electrodeid();
  inline void clear_has_electrodeid();
  inline void set_has_samplingfrequencyhz();
  inline void clear_has_samplingfrequencyhz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 timestamp_software_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 nchannels_;
  ::google::protobuf::int32 nsamples_;
  ::google::protobuf::int32 sortedid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > color_;
  mutable int _color_cached_byte_size_;
  ::google::protobuf::int32 electrodeid_;
  ::google::protobuf::int32 samplingfrequencyhz_;
  ::google::protobuf::RepeatedField< float > pcproj_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gain_;
  mutable int _gain_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threshold_;
  mutable int _threshold_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_Sink0MQprocotol();
  friend void protobuf_AssignDesc_Sink0MQprocotol();
  friend void protobuf_ShutdownFile_Sink0MQprocotol();

  void InitAsDefaultInstance();
  static Spike* default_instance_;
};
// -------------------------------------------------------------------

class ChannelData : public ::google::protobuf::Message {
 public:
  ChannelData();
  virtual ~ChannelData();

  ChannelData(const ChannelData& from);

  inline ChannelData& operator=(const ChannelData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelData& default_instance();

  void Swap(ChannelData* other);

  // implements Message ----------------------------------------------

  ChannelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelData& from);
  void MergeFrom(const ChannelData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // required int32 nSamples = 2;
  inline bool has_nsamples() const;
  inline void clear_nsamples();
  static const int kNSamplesFieldNumber = 2;
  inline ::google::protobuf::int32 nsamples() const;
  inline void set_nsamples(::google::protobuf::int32 value);

  // repeated int32 data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // required int32 samplingFrequencyHz = 4;
  inline bool has_samplingfrequencyhz() const;
  inline void clear_samplingfrequencyhz();
  static const int kSamplingFrequencyHzFieldNumber = 4;
  inline ::google::protobuf::int32 samplingfrequencyhz() const;
  inline void set_samplingfrequencyhz(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OpenEphys.ChannelData)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_nsamples();
  inline void clear_has_nsamples();
  inline void set_has_samplingfrequencyhz();
  inline void clear_has_samplingfrequencyhz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 nsamples_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::int32 samplingfrequencyhz_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Sink0MQprocotol();
  friend void protobuf_AssignDesc_Sink0MQprocotol();
  friend void protobuf_ShutdownFile_Sink0MQprocotol();

  void InitAsDefaultInstance();
  static ChannelData* default_instance_;
};
// -------------------------------------------------------------------

class ChannelsData : public ::google::protobuf::Message {
 public:
  ChannelsData();
  virtual ~ChannelsData();

  ChannelsData(const ChannelsData& from);

  inline ChannelsData& operator=(const ChannelsData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelsData& default_instance();

  void Swap(ChannelsData* other);

  // implements Message ----------------------------------------------

  ChannelsData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelsData& from);
  void MergeFrom(const ChannelsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nChannels = 1;
  inline bool has_nchannels() const;
  inline void clear_nchannels();
  static const int kNChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 nchannels() const;
  inline void set_nchannels(::google::protobuf::int32 value);

  // repeated .OpenEphys.ChannelData channels = 2;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline const ::OpenEphys::ChannelData& channels(int index) const;
  inline ::OpenEphys::ChannelData* mutable_channels(int index);
  inline ::OpenEphys::ChannelData* add_channels();
  inline const ::google::protobuf::RepeatedPtrField< ::OpenEphys::ChannelData >&
      channels() const;
  inline ::google::protobuf::RepeatedPtrField< ::OpenEphys::ChannelData >*
      mutable_channels();

  // @@protoc_insertion_point(class_scope:OpenEphys.ChannelsData)
 private:
  inline void set_has_nchannels();
  inline void clear_has_nchannels();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::OpenEphys::ChannelData > channels_;
  ::google::protobuf::int32 nchannels_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Sink0MQprocotol();
  friend void protobuf_AssignDesc_Sink0MQprocotol();
  friend void protobuf_ShutdownFile_Sink0MQprocotol();

  void InitAsDefaultInstance();
  static ChannelsData* default_instance_;
};
// ===================================================================


// ===================================================================

// DoubleMatrix

// required uint32 rows = 1;
inline bool DoubleMatrix::has_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoubleMatrix::set_has_rows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoubleMatrix::clear_has_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoubleMatrix::clear_rows() {
  rows_ = 0u;
  clear_has_rows();
}
inline ::google::protobuf::uint32 DoubleMatrix::rows() const {
  return rows_;
}
inline void DoubleMatrix::set_rows(::google::protobuf::uint32 value) {
  set_has_rows();
  rows_ = value;
}

// required uint32 cols = 2;
inline bool DoubleMatrix::has_cols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DoubleMatrix::set_has_cols() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DoubleMatrix::clear_has_cols() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DoubleMatrix::clear_cols() {
  cols_ = 0u;
  clear_has_cols();
}
inline ::google::protobuf::uint32 DoubleMatrix::cols() const {
  return cols_;
}
inline void DoubleMatrix::set_cols(::google::protobuf::uint32 value) {
  set_has_cols();
  cols_ = value;
}

// repeated double data = 3 [packed = true];
inline int DoubleMatrix::data_size() const {
  return data_.size();
}
inline void DoubleMatrix::clear_data() {
  data_.Clear();
}
inline double DoubleMatrix::data(int index) const {
  return data_.Get(index);
}
inline void DoubleMatrix::set_data(int index, double value) {
  data_.Set(index, value);
}
inline void DoubleMatrix::add_data(double value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleMatrix::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleMatrix::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Spike

// required sfixed64 timestamp = 1;
inline bool Spike::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Spike::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Spike::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Spike::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Spike::timestamp() const {
  return timestamp_;
}
inline void Spike::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required sfixed64 timestamp_software = 2;
inline bool Spike::has_timestamp_software() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Spike::set_has_timestamp_software() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Spike::clear_has_timestamp_software() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Spike::clear_timestamp_software() {
  timestamp_software_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_software();
}
inline ::google::protobuf::int64 Spike::timestamp_software() const {
  return timestamp_software_;
}
inline void Spike::set_timestamp_software(::google::protobuf::int64 value) {
  set_has_timestamp_software();
  timestamp_software_ = value;
}

// required int32 source = 3;
inline bool Spike::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Spike::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Spike::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Spike::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 Spike::source() const {
  return source_;
}
inline void Spike::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
}

// required int32 nChannels = 4;
inline bool Spike::has_nchannels() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Spike::set_has_nchannels() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Spike::clear_has_nchannels() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Spike::clear_nchannels() {
  nchannels_ = 0;
  clear_has_nchannels();
}
inline ::google::protobuf::int32 Spike::nchannels() const {
  return nchannels_;
}
inline void Spike::set_nchannels(::google::protobuf::int32 value) {
  set_has_nchannels();
  nchannels_ = value;
}

// required int32 nSamples = 5;
inline bool Spike::has_nsamples() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Spike::set_has_nsamples() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Spike::clear_has_nsamples() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Spike::clear_nsamples() {
  nsamples_ = 0;
  clear_has_nsamples();
}
inline ::google::protobuf::int32 Spike::nsamples() const {
  return nsamples_;
}
inline void Spike::set_nsamples(::google::protobuf::int32 value) {
  set_has_nsamples();
  nsamples_ = value;
}

// required int32 sortedId = 6;
inline bool Spike::has_sortedid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Spike::set_has_sortedid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Spike::clear_has_sortedid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Spike::clear_sortedid() {
  sortedid_ = 0;
  clear_has_sortedid();
}
inline ::google::protobuf::int32 Spike::sortedid() const {
  return sortedid_;
}
inline void Spike::set_sortedid(::google::protobuf::int32 value) {
  set_has_sortedid();
  sortedid_ = value;
}

// required int32 electrodeID = 7;
inline bool Spike::has_electrodeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Spike::set_has_electrodeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Spike::clear_has_electrodeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Spike::clear_electrodeid() {
  electrodeid_ = 0;
  clear_has_electrodeid();
}
inline ::google::protobuf::int32 Spike::electrodeid() const {
  return electrodeid_;
}
inline void Spike::set_electrodeid(::google::protobuf::int32 value) {
  set_has_electrodeid();
  electrodeid_ = value;
}

// repeated int32 color = 8 [packed = true];
inline int Spike::color_size() const {
  return color_.size();
}
inline void Spike::clear_color() {
  color_.Clear();
}
inline ::google::protobuf::int32 Spike::color(int index) const {
  return color_.Get(index);
}
inline void Spike::set_color(int index, ::google::protobuf::int32 value) {
  color_.Set(index, value);
}
inline void Spike::add_color(::google::protobuf::int32 value) {
  color_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Spike::color() const {
  return color_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Spike::mutable_color() {
  return &color_;
}

// repeated float pcProj = 9;
inline int Spike::pcproj_size() const {
  return pcproj_.size();
}
inline void Spike::clear_pcproj() {
  pcproj_.Clear();
}
inline float Spike::pcproj(int index) const {
  return pcproj_.Get(index);
}
inline void Spike::set_pcproj(int index, float value) {
  pcproj_.Set(index, value);
}
inline void Spike::add_pcproj(float value) {
  pcproj_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Spike::pcproj() const {
  return pcproj_;
}
inline ::google::protobuf::RepeatedField< float >*
Spike::mutable_pcproj() {
  return &pcproj_;
}

// required int32 samplingFrequencyHz = 10;
inline bool Spike::has_samplingfrequencyhz() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Spike::set_has_samplingfrequencyhz() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Spike::clear_has_samplingfrequencyhz() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Spike::clear_samplingfrequencyhz() {
  samplingfrequencyhz_ = 0;
  clear_has_samplingfrequencyhz();
}
inline ::google::protobuf::int32 Spike::samplingfrequencyhz() const {
  return samplingfrequencyhz_;
}
inline void Spike::set_samplingfrequencyhz(::google::protobuf::int32 value) {
  set_has_samplingfrequencyhz();
  samplingfrequencyhz_ = value;
}

// repeated int32 data = 11 [packed = true];
inline int Spike::data_size() const {
  return data_.size();
}
inline void Spike::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 Spike::data(int index) const {
  return data_.Get(index);
}
inline void Spike::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
}
inline void Spike::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Spike::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Spike::mutable_data() {
  return &data_;
}

// repeated int32 gain = 12 [packed = true];
inline int Spike::gain_size() const {
  return gain_.size();
}
inline void Spike::clear_gain() {
  gain_.Clear();
}
inline ::google::protobuf::int32 Spike::gain(int index) const {
  return gain_.Get(index);
}
inline void Spike::set_gain(int index, ::google::protobuf::int32 value) {
  gain_.Set(index, value);
}
inline void Spike::add_gain(::google::protobuf::int32 value) {
  gain_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Spike::gain() const {
  return gain_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Spike::mutable_gain() {
  return &gain_;
}

// repeated int32 threshold = 13 [packed = true];
inline int Spike::threshold_size() const {
  return threshold_.size();
}
inline void Spike::clear_threshold() {
  threshold_.Clear();
}
inline ::google::protobuf::int32 Spike::threshold(int index) const {
  return threshold_.Get(index);
}
inline void Spike::set_threshold(int index, ::google::protobuf::int32 value) {
  threshold_.Set(index, value);
}
inline void Spike::add_threshold(::google::protobuf::int32 value) {
  threshold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Spike::threshold() const {
  return threshold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Spike::mutable_threshold() {
  return &threshold_;
}

// -------------------------------------------------------------------

// ChannelData

// required int32 channel = 1;
inline bool ChannelData::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelData::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelData::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelData::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ChannelData::channel() const {
  return channel_;
}
inline void ChannelData::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// required int32 nSamples = 2;
inline bool ChannelData::has_nsamples() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelData::set_has_nsamples() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelData::clear_has_nsamples() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelData::clear_nsamples() {
  nsamples_ = 0;
  clear_has_nsamples();
}
inline ::google::protobuf::int32 ChannelData::nsamples() const {
  return nsamples_;
}
inline void ChannelData::set_nsamples(::google::protobuf::int32 value) {
  set_has_nsamples();
  nsamples_ = value;
}

// repeated int32 data = 3 [packed = true];
inline int ChannelData::data_size() const {
  return data_.size();
}
inline void ChannelData::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 ChannelData::data(int index) const {
  return data_.Get(index);
}
inline void ChannelData::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
}
inline void ChannelData::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChannelData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChannelData::mutable_data() {
  return &data_;
}

// required int32 samplingFrequencyHz = 4;
inline bool ChannelData::has_samplingfrequencyhz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChannelData::set_has_samplingfrequencyhz() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChannelData::clear_has_samplingfrequencyhz() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChannelData::clear_samplingfrequencyhz() {
  samplingfrequencyhz_ = 0;
  clear_has_samplingfrequencyhz();
}
inline ::google::protobuf::int32 ChannelData::samplingfrequencyhz() const {
  return samplingfrequencyhz_;
}
inline void ChannelData::set_samplingfrequencyhz(::google::protobuf::int32 value) {
  set_has_samplingfrequencyhz();
  samplingfrequencyhz_ = value;
}

// -------------------------------------------------------------------

// ChannelsData

// required int32 nChannels = 1;
inline bool ChannelsData::has_nchannels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelsData::set_has_nchannels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelsData::clear_has_nchannels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelsData::clear_nchannels() {
  nchannels_ = 0;
  clear_has_nchannels();
}
inline ::google::protobuf::int32 ChannelsData::nchannels() const {
  return nchannels_;
}
inline void ChannelsData::set_nchannels(::google::protobuf::int32 value) {
  set_has_nchannels();
  nchannels_ = value;
}

// repeated .OpenEphys.ChannelData channels = 2;
inline int ChannelsData::channels_size() const {
  return channels_.size();
}
inline void ChannelsData::clear_channels() {
  channels_.Clear();
}
inline const ::OpenEphys::ChannelData& ChannelsData::channels(int index) const {
  return channels_.Get(index);
}
inline ::OpenEphys::ChannelData* ChannelsData::mutable_channels(int index) {
  return channels_.Mutable(index);
}
inline ::OpenEphys::ChannelData* ChannelsData::add_channels() {
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OpenEphys::ChannelData >&
ChannelsData::channels() const {
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::OpenEphys::ChannelData >*
ChannelsData::mutable_channels() {
  return &channels_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OpenEphys

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Sink0MQprocotol__INCLUDED